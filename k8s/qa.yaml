apiVersion: v1
kind: Namespace
metadata:
  name: spring-boot-qa
  labels:
    name: spring-boot-qa
    environment: qa
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: spring-boot-config-qa
  namespace: spring-boot-qa
data:
  application.yml: |
    spring:
      profiles:
        active: qa
    server:
      port: 8080
    management:
      endpoints:
        web:
          exposure:
            include: health,info,metrics,env
      endpoint:
        health:
          show-details: when-authorized
---
apiVersion: v1
kind: Secret
metadata:
  name: spring-boot-secrets-qa
  namespace: spring-boot-qa
type: Opaque
data:
  db-username: cWFfdXNlcg==  # qa_user
  db-password: cWFfcGFzcw==  # qa_pass
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spring-boot-k8s-demo
  namespace: spring-boot-qa
  labels:
    app: spring-boot-k8s-demo
    environment: qa
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: spring-boot-k8s-demo
  template:
    metadata:
      labels:
        app: spring-boot-k8s-demo
        environment: qa
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: spring-boot-k8s-demo
          image: spring-boot-k8s-demo:latest
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "qa"
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: spring-boot-secrets-qa
                  key: db-username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: spring-boot-secrets-qa
                  key: db-password
            - name: JAVA_OPTS
              value: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -XX:+UseG1GC -XX:+ExitOnOutOfMemoryError"
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
              ephemeral-storage: "1Gi"
            limits:
              memory: "1Gi"
              cpu: "1000m"
              ephemeral-storage: "2Gi"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
            capabilities:
              drop:
                - ALL
          volumeMounts:
            - name: tmp-volume
              mountPath: /tmp
            - name: config-volume
              mountPath: /app/config
              readOnly: true
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: http
            initialDelaySeconds: 60
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /actuator/health
              port: http
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 30
      volumes:
        - name: tmp-volume
          emptyDir: {}
        - name: config-volume
          configMap:
            name: spring-boot-config-qa
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: spring-boot-k8s-demo
  namespace: spring-boot-qa
  labels:
    app: spring-boot-k8s-demo
spec:
  type: ClusterIP
  selector:
    app: spring-boot-k8s-demo
  ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: http
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: spring-boot-k8s-demo
  namespace: spring-boot-qa
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-staging"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - spring-boot-qa.example.com
      secretName: spring-boot-qa-tls
  rules:
    - host: spring-boot-qa.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: spring-boot-k8s-demo
                port:
                  number: 8080
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: spring-boot-k8s-demo-hpa
  namespace: spring-boot-qa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: spring-boot-k8s-demo
  minReplicas: 2
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80


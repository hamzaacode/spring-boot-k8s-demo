apiVersion: v1
kind: Namespace
metadata:
  name: spring-boot-prod
  labels:
    name: spring-boot-prod
    environment: production
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: spring-boot-config-prod
  namespace: spring-boot-prod
data:
  application.yml: |
    spring:
      profiles:
        active: prod
    server:
      port: 8080
    management:
      endpoints:
        web:
          exposure:
            include: health,info,metrics
      endpoint:
        health:
          show-details: never
---
apiVersion: v1
kind: Secret
metadata:
  name: spring-boot-secrets-prod
  namespace: spring-boot-prod
type: Opaque
data:
  # These should be set via external secret management in production
  db-username: cHJvZF91c2Vy  # prod_user
  db-password: cHJvZF9wYXNz  # prod_pass
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spring-boot-k8s-demo
  namespace: spring-boot-prod
  labels:
    app: spring-boot-k8s-demo
    environment: production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: spring-boot-k8s-demo
  template:
    metadata:
      labels:
        app: spring-boot-k8s-demo
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - spring-boot-k8s-demo
              topologyKey: kubernetes.io/hostname
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: spring-boot-k8s-demo
          image: spring-boot-k8s-demo:latest
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "prod"
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: spring-boot-secrets-prod
                  key: db-username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: spring-boot-secrets-prod
                  key: db-password
            - name: JAVA_OPTS
              value: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -XX:+UseG1GC -XX:+ExitOnOutOfMemoryError -XX:+UseStringDeduplication"
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
              ephemeral-storage: "2Gi"
            limits:
              memory: "2Gi"
              cpu: "2000m"
              ephemeral-storage: "4Gi"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
            capabilities:
              drop:
                - ALL
          volumeMounts:
            - name: tmp-volume
              mountPath: /tmp
            - name: config-volume
              mountPath: /app/config
              readOnly: true
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: http
            initialDelaySeconds: 45
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: http
            initialDelaySeconds: 90
            periodSeconds: 30
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /actuator/health
              port: http
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 30
      volumes:
        - name: tmp-volume
          emptyDir:
            sizeLimit: 1Gi
        - name: config-volume
          configMap:
            name: spring-boot-config-prod
      terminationGracePeriodSeconds: 60
---
apiVersion: v1
kind: Service
metadata:
  name: spring-boot-k8s-demo
  namespace: spring-boot-prod
  labels:
    app: spring-boot-k8s-demo
spec:
  type: ClusterIP
  selector:
    app: spring-boot-k8s-demo
  ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: http
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: spring-boot-k8s-demo
  namespace: spring-boot-prod
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - spring-boot-api.example.com
      secretName: spring-boot-prod-tls
  rules:
    - host: spring-boot-api.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: spring-boot-k8s-demo
                port:
                  number: 8080
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: spring-boot-k8s-demo-pdb
  namespace: spring-boot-prod
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: spring-boot-k8s-demo
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: spring-boot-k8s-demo-hpa
  namespace: spring-boot-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: spring-boot-k8s-demo
  minReplicas: 3
  maxReplicas: 20
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 25
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 50
          periodSeconds: 30
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: spring-boot-k8s-demo-netpol
  namespace: spring-boot-prod
spec:
  podSelector:
    matchLabels:
      app: spring-boot-k8s-demo
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 8080
  egress:
    - to: []
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53
    - to: []
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80
        - protocol: TCP
          port: 3306


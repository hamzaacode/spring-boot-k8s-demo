name: Spring Boot K8s Workflow

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: spring-boot-k8s-demo
  DOCKER_TAG: latest

jobs:
  build-and-deploy:
    runs-on: self-hosted
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}
    steps:
    # Checkout should be the first step
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Git Repository
      run: |
        echo "Current directory: $(pwd)"
        # Initialize git if needed
        if [ ! -d ".git" ]; then
          git init
          git remote add origin https://github.com/${{ github.repository }}.git
          git fetch
          git checkout -f ${{ github.ref }}
        fi
        
    - name: Verify Repository Setup
      run: |
        echo "Repository contents:"
        ls -la
        echo "Git status:"
        git status || true
        echo "Git branch:"
        git branch || true
        echo "Git remote:"
        git remote -v || true
        
    - name: Initial Diagnostics
      run: |
        echo "Runner user: $(whoami)"
        echo "Java version:"
        java -version || echo "Java not found"
        echo "Maven version:"
        mvn -v || echo "Maven not found"
        echo "Docker version:"
        docker --version || echo "Docker not found"
        echo "Minikube version:"
        minikube version || echo "Minikube not found"
        echo "Kubectl version:"
        kubectl version --client || echo "Kubectl not found"
        
    - name: System Check
      run: |
        # Check if Docker daemon is running
        docker info || echo "Docker daemon not running"
        
        # Check minikube status
        minikube status || echo "Minikube not running"
        
        # Check kubectl context
        kubectl config current-context || echo "No kubectl context set"
        
    - name: Verify Repository Content
      run: |
        echo "Repository contents:"
        ls -la
        echo "Git status:"
        git status

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven (Development Mode)
      run: |
        echo "Preparing Maven build..."
        # Ensure we're in the right directory
        pwd
        ls -la
        
        # Make mvnw executable and verify it exists
        echo "Making mvnw executable..."
        chmod +x ./mvnw
        ls -l ./mvnw
        
        # Verify Maven wrapper properties
        echo "Checking Maven wrapper..."
        ls -l .mvn/wrapper/maven-wrapper.properties || echo "Maven wrapper properties not found"
        
        # Clean and package with detailed output
        echo "Starting Maven build..."
        ./mvnw clean package \
          -DskipTests \
          -T 1C \
          -Dspring.profiles.active=dev \
          -Dmaven.test.skip=true \
          -X
        
        # Verify JAR file exists
        ls -l target/*.jar || echo "JAR file not created"

    - name: Setup Minikube
      run: |
        # Start Minikube if not running
        if ! minikube status; then
          echo "Starting Minikube..."
          minikube start --driver=docker
          echo "Waiting for Minikube to be ready..."
          sleep 30
        fi
        
        # Set docker env
        eval $(minikube docker-env)
        echo "Connected to Minikube's Docker daemon"
        
        # Verify connection
        docker info
        minikube status

    - name: Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} .
        echo "Docker image built successfully"

    - name: Deploy to Minikube
      run: |
        # Delete existing deployment if it exists
        kubectl delete deployment spring-boot-k8s-demo --ignore-not-found
        
        # Apply the new configuration
        kubectl apply -f k8s.yaml
        
        # Wait for the deployment to be ready
        kubectl rollout status deployment/spring-boot-k8s-demo --timeout=120s
        
        # Get deployment status
        kubectl get deployment spring-boot-k8s-demo
        
        # Get pod status
        kubectl get pods -l app=spring-boot-k8s-demo
        
        # Get the service URL
        echo "Application URL:"
        minikube service spring-boot-k8s-demo --url

    - name: Verify Deployment
      run: |
        # Wait for the service to be ready
        sleep 10
        
        # Get service URL
        URL=$(minikube service spring-boot-k8s-demo --url)
        
        # Test the endpoint
        curl -s $URL/hello || echo "Warning: Application not responding"
        
        # Show logs from the pod
        POD=$(kubectl get pods -l app=spring-boot-k8s-demo -o jsonpath="{.items[0].metadata.name}")
        echo "Application logs:"
        kubectl logs $POD
